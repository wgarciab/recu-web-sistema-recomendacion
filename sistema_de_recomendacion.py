# -*- coding: utf-8 -*-
"""Sistema de recomendación.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13tdHzBTlIIlFjADjjhNY0-JUGASQFQCP

# 2. DISEÑO E IMPLEMENTACIÓN: SISTEMA DE RECOMENDACIÒN (60%)
Diseñar e implementar un sistema de recomendación basado en la información extraída de cualquiera de los dos grafos de conocimiento vistos en clase (DBpedia o Wikidata).

Se definirá el tipo de objeto a recomendar (películas, libros, autos, etc.) basados en la información existente en uno de los grafos de conocimiento vistos en clase (DBpedia o Wikipedia). (valor 0.5)

**Respuesta: Por definir**

Representar un conjunto de consultas en SPARQL sobre uno de los
grafos de conocimiento (DBpedia o Wikidata) mediante la manipulación
programática ya sea RDFLib, SPARQLWrapper o owlready2 que permita
extraer la información en un modelo vectorial que represente la
información de los objetos que se desean implementar y con esto se
construirá e4l modelo vectorial con la información de cada objeto del
sistema de recomendación definido en el paso anterior. Todo esto se
implementará en el ambiente de Python. (valor 1.0)

Se instalan e importan las librerías necesarias
"""

from SPARQLWrapper import SPARQLWrapper, JSON, DIGEST, POST
import pandas as pd

"""hacemos la consulta a wikidata a una ontoligía sobre video juegos 

"""

# Indicamos el endpoint donde haremos la consulta
sparql = SPARQLWrapper("https://query.wikidata.org/sparql")

# Creamos la consulta
sparql.setQuery("""
SELECT DISTINCT ?itemLabel 
WHERE 
{
  ?item wdt:P31 wd:Q7889. # Debe ser un videojuego
  ?item wdt:P136 wd:Q2762504. # Independiente
  ?item wdt:P136 wd:Q828322. # de Plataformas
  ?item wdt:P577 ?date.
  FILTER(YEAR(?date) > 2016 && YEAR(?date) < 2018)
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en". }
}
""")

sparql.setReturnFormat(JSON)

# Obtenemos el resultado y ejecutamos la consulta
results = sparql.query().convert()
print(results)

#Se guardan los resultados en un arreglo y luego se presentan en un data frame 
nombreVideojuegos = []

for result in results["results"]["bindings"]:
    nombreVideojuegos.append(result["itemLabel"]["value"])

pd.DataFrame(zip(nombreVideojuegos), columns=['Nombre'])

"""Se crea una calificacion aleatoria de 1 a 10 para cada video juego """

import numpy as np
np.random.seed(123)
data = np.random.randint(0, 10, (20, 11))
calificaciones = pd.DataFrame(data, columns=nombreVideojuegos)
calificaciones

# ingresar calificaciones del usuario a recomendar
def recomendar_videojuegos(usuario_recomendar):

  #calificaciones.loc[len(calificaciones.index)] = usuario_recomendar
  #calificaciones

  jugados = [index for index in range(len(usuario_recomendar)) if usuario_recomendar[index] != 0]
  no_jugados = [index for index in range(len(usuario_recomendar)) if usuario_recomendar[index] == 0]

  calificaciones_jugados = calificaciones.drop(calificaciones.columns[no_jugados],axis = 1)
  calificaciones_no_jugados = calificaciones.drop(calificaciones.columns[jugados],axis = 1)
  calificaciones_jugados

  """Se buscan los usuarios que tengan similutd en gustos al usuario que se le recomendará un juego de acuerdo con la califcación que estos han puesto sobre los video juegos probados

  """

  usuario_recomendar = [calificacion for calificacion in usuario_recomendar if calificacion != 0]

  similitudes = []
  calificaciones_vistas_arr = calificaciones_jugados.to_numpy()

  for row in calificaciones_vistas_arr:
    #print(row)
    similitud = np.linalg.norm(row - np.array(usuario_recomendar))
    similitudes.append(similitud)

  df_similitudes = pd.DataFrame(zip(similitudes), columns=['Similitud'])

  """Buscamos los usuarios más similares al usuario que le vamos a hacer la recomendación, estos son los que tienen la puntuación de similitiud más baja, porque este valor corresponde a la distancia y se espera que sea lo menor posible."""

  # copy the data
  df_min_max_scaled = df_similitudes.copy()
    
  # apply normalization techniques by Column 1
  column = 'Similitud'
  df_min_max_scaled[column] = (df_min_max_scaled[column] - df_min_max_scaled[column].min()) / (df_min_max_scaled[column].max() - df_min_max_scaled[column].min())    
    
  # view normalized data
  print(df_min_max_scaled)

  """Filtramos los 5 usuarios más similares"""

  df_min_max_scaled.sort_values(by=['Similitud'])
  usuarios_mas_similares = df_min_max_scaled.sort_values(by=['Similitud']).head(5)
  usuarios_mas_similares

  """Selecionamos los juegos que el usuario no ha jugado, con la calificación de los usuario más si¿milares al él."""

  calificaciones_cinco_mas_cercanos=calificaciones_no_jugados.filter(items = usuarios_mas_similares.index, axis=0)
  calificaciones_cinco_mas_cercanos

  """Multiplicamos la calificación por el valor de similitud de los usuarios que si han jugado el juego."""

  for column in calificaciones_cinco_mas_cercanos:
    calificaciones_cinco_mas_cercanos[column] = calificaciones_cinco_mas_cercanos[column] * usuarios_mas_similares['Similitud']
  calificaciones_cinco_mas_cercanos

  """Totalisamos los productos para encontrar el juego más similar a las preferencias del usuario."""

  suma_juegos_a_recomendar = calificaciones_cinco_mas_cercanos.sum(axis=0)
  suma_juegos_a_recomendar

  calificaciones_cinco_mas_cercanos = calificaciones_cinco_mas_cercanos.replace({'0':np.nan, 0:np.nan})
  calificaciones_cinco_mas_cercanos
  calificaciones_cinco_mas_cercanos

  """Calculamos los pesos para cada juego a recomendar"""

  pesos = []
  for column in calificaciones_cinco_mas_cercanos:
    indices = calificaciones_cinco_mas_cercanos[column].notnull()
    peso = usuarios_mas_similares[indices].sum()
    pesos.append(peso)
  pesos

  """Obtenemos la matriz de recomendación"""

  matris_de_recomendaciones = []
  for i in range(len(pesos)) :
    matris_de_recomendaciones.append(suma_juegos_a_recomendar[i]/pesos[i])
  matris_de_recomendaciones

  """Presentamos la matriz de recomedaciones en un data frame para mejor ordenada por valor más similar(con menor distancia) y recomendamos los primeros 5 """

  recomendaciones_df = pd.DataFrame(data=matris_de_recomendaciones,index=calificaciones_cinco_mas_cercanos.columns)
  if not recomendaciones_df.empty:
    recomendaciones_df = recomendaciones_df.sort_values(by='Similitud').head(5).replace({np.nan:0})
  

  return(recomendaciones_df)